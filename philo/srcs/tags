!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/nfs/homes/eorer/Cursus_42/philo/srcs/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
check_args	main.c	/^int	check_args(char *arg)$/;"	f	typeref:typename:int
check_nb_eat	threads.c	/^int	check_nb_eat(t_philo *philo)$/;"	f	typeref:typename:int
checker	threads.c	/^void	*checker(void *arg)$/;"	f	typeref:typename:void *
free_list	lst_utilities.c	/^void	free_list(t_philo *list)$/;"	f	typeref:typename:void
free_philo	ft_exit.c	/^void	free_philo(t_philo *philo)$/;"	f	typeref:typename:void
ft_atoi	utilities.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	utilities.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_check	main.c	/^int	ft_check(int argc, char **argv)$/;"	f	typeref:typename:int
ft_eating	eating.c	/^int	ft_eating(t_philo *philo)$/;"	f	typeref:typename:int
ft_exit	ft_exit.c	/^void	ft_exit(t_philo *philo)$/;"	f	typeref:typename:void
ft_generate_threads	threads.c	/^int	ft_generate_threads(t_philo *philo)$/;"	f	typeref:typename:int
ft_get_time	utilities.c	/^long	ft_get_time(void)$/;"	f	typeref:typename:long
ft_init_data	init.c	/^t_data	*ft_init_data(char	**argv)$/;"	f	typeref:typename:t_data *
ft_initiate_philo	init.c	/^t_philo	*ft_initiate_philo(char **argv)$/;"	f	typeref:typename:t_philo *
ft_isdigit	utilities.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_join_threads	main.c	/^int	ft_join_threads(t_philo *philos)$/;"	f	typeref:typename:int
ft_lstadd_back	lst_utilities.c	/^void	ft_lstadd_back(t_philo **lst, t_philo *new)$/;"	f	typeref:typename:void
ft_lstlast	lst_utilities.c	/^t_philo	*ft_lstlast(t_philo *lst)$/;"	f	typeref:typename:t_philo *
ft_lstnew	init.c	/^t_philo	*ft_lstnew(int id, char **argv, t_data *data)$/;"	f	typeref:typename:t_philo *
ft_one_philo	ft_one_philo.c	/^void	*ft_one_philo(void *arg)$/;"	f	typeref:typename:void *
ft_philo	threads.c	/^void	*ft_philo(void *arg)$/;"	f	typeref:typename:void *
ft_print	eating.c	/^int	ft_print(t_philo *philo, char *str, int i_dead)$/;"	f	typeref:typename:int
ft_sleeping	eating.c	/^void	ft_sleeping(t_philo *philo)$/;"	f	typeref:typename:void
ft_usleep	utilities.c	/^int	ft_usleep(useconds_t time)$/;"	f	typeref:typename:int
lancement_threads	threads.c	/^int	lancement_threads(pthread_t *threads, t_philo *philo, int i)$/;"	f	typeref:typename:int
lock_forks	eating.c	/^void	lock_forks(t_philo *philo)$/;"	f	typeref:typename:void
main	main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
one_philo	ft_one_philo.c	/^int	one_philo(t_philo *philo)$/;"	f	typeref:typename:int
sleep_eating	eating.c	/^void	sleep_eating(t_philo *philo)$/;"	f	typeref:typename:void
unlock_forks	eating.c	/^void	unlock_forks(t_philo *philo)$/;"	f	typeref:typename:void
